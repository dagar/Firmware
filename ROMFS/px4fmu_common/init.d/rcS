#!nsh
# Un comment and use set +e to ignore and set -e to enable 'exit on error control'
set +e
# Un comment the line below to help debug scripts by printing a trace of the script commands
#set -x
# PX4FMU startup script.
#
# NOTE: environment variable references:
#    If the dollar sign ('$') is followed by a left bracket ('{') then the
#    variable name is terminated with the right bracket character ('}').
#    Otherwise, the variable name goes to the end of the argument.
#
#
# NOTE: COMMENT LINES ARE REMOVED BEFORE STORED IN ROMFS.
#
# UART mapping on FMUv1/2/3/4:
#
# UART1			/dev/ttyS0		IO debug
# USART2		/dev/ttyS1		TELEM1 (flow control)
# USART3		/dev/ttyS2		TELEM2 (flow control)
# UART4
# UART7							CONSOLE
# UART8							SERIAL4
#
#
# UART mapping on FMUv5:
#
# UART1			/dev/ttyS0		GPS
# USART2		/dev/ttyS1		TELEM1 (flow control)
# USART3		/dev/ttyS2		TELEM2 (flow control)
# UART4			/dev/ttyS3		?
# USART6		/dev/ttyS4		TELEM3 (flow control)
# UART7			/dev/ttyS5		?
# UART8			/dev/ttyS6		CONSOLE

#
# Mount the procfs.
#
mount -t procfs /proc

#
# Start CDC/ACM serial driver
#
if sercon
then
fi

#
# Default to auto-start mode.
#
set MODE autostart

set TUNE_ERR ML<<CP4CP4CP4CP4CP4
set LOG_FILE /fs/microsd/bootlog.txt

#
# Try to mount the microSD card.
#
# REBOOTWORK this needs to start after the flight control loop
if mount -t vfat /dev/mmcsd0 /fs/microsd
then
	echo "[i] microSD mounted: /fs/microsd"
	if hardfault_log check
	then
		tone_alarm error
		if hardfault_log commit
		then
			hardfault_log reset
			tone_alarm stop
		fi
else
	# Start playing the startup tune
	tone_alarm start
fi
else
	tone_alarm MBAGP
	if mkfatfs /dev/mmcsd0
	then
		if mount -t vfat /dev/mmcsd0 /fs/microsd
		then
			echo "INFO  [init] MicroSD card formatted"
		else
			echo "ERROR [init] Format failed"
			tone_alarm MNBG
			set LOG_FILE /dev/null
		fi
	else
		set LOG_FILE /dev/null
	fi
fi

#
# Look for an init script on the microSD card.
# Disable autostart if the script found.
#
set FRC /fs/microsd/etc/rc.txt
if [ -f $FRC ]
then
	echo "INFO  [init] Executing script: ${FRC}"
	sh $FRC
	set MODE custom
fi
unset FRC

if [ $MODE == autostart ]
then

	#
	# Start the ORB (first app to start)
	#
	uorb start

	#
	# Load parameters
	#
	set PARAM_FILE /fs/microsd/params
	if mtd start
	then
		set PARAM_FILE /fs/mtd_params
	fi

	param select $PARAM_FILE
	if param load
	then
	else
		if param reset
		then
		fi
	fi

	#
	# Start system state indicator
	#
	if rgbled start
	then
	else
		if blinkm start
		then
			blinkm systemstate
		fi
	fi

	# Currently unused, but might be useful down the road
	#if pca8574 start
	#then
	#fi

	#
	# Set AUTOCNF flag to use it in AUTOSTART scripts
	#
	if param compare SYS_AUTOCONFIG 1
	then
		# Wipe out params except RC*, TC*, and total flight time
		param reset_nostart RC* TC* LND_FLIGHT_T_*
		set AUTOCNF yes
	else
		set AUTOCNF no

		#
		# Release 1.4.0 transitional support:
		# set to old default if unconfigured.
		# this preserves the previous behaviour
		#
		if param compare BAT_N_CELLS 0
		then
			param set BAT_N_CELLS 3
		fi
	fi

	#
	# Set default values
	#
	set HIL no
	set VEHICLE_TYPE none
	set MIXER none
	set MIXER_AUX none
	set OUTPUT_MODE none
	set PWM_OUT none
	set PWM_RATE p:PWM_RATE
	set PWM_DISARMED p:PWM_DISARMED
	set PWM_MIN p:PWM_MIN
	set PWM_MAX p:PWM_MAX
	set PWM_AUX_OUT none
	set PWM_AUX_RATE none
	set PWM_ACHDIS none
	set PWM_AUX_DISARMED p:PWM_AUX_DISARMED
	set PWM_AUX_MIN p:PWM_AUX_MIN
	set PWM_AUX_MAX p:PWM_AUX_MAX
	set FAILSAFE_AUX none
	set MK_MODE none
	set FMU_MODE pwm
	set AUX_MODE pwm
	set EXIT_ON_END no
	set MAV_TYPE none
	set FAILSAFE none
	set USE_IO yes
	set LOGGER_BUF 16
	set TTYS1_BUSY no

	#
	# Set USE_IO flag
	#
	if param compare SYS_USE_IO 1
	then
		if ver hwcmp PX4FMU_V4
		then
			set USE_IO no
		fi

		if ver hwcmp PX4FMU_V5
		then
			set USE_IO no
		fi

		if ver hwcmp MINDPX_V2
		then
			set USE_IO no
		fi

		if ver hwcmp CRAZYFLIE
		then
			set USE_IO no

			if param compare SYS_AUTOSTART 0
			then
				param set SYS_AUTOSTART 4900
				set AUTOCNF yes
			fi
		fi

		if ver hwcmp AEROFC_V1
		then
			set USE_IO no
		fi

		if ver hwcmp AEROCORE2
		then
			set USE_IO no
		fi
	else
		set USE_IO no
	fi

	if ver hwcmp AEROFC_V1
	then
		if param compare SYS_AUTOSTART 0
		then
			set AUTOCNF yes
		fi

		# We don't allow changing AUTOSTART as it doesn't work in
		# other configurations
		param set SYS_AUTOSTART 4070
	fi

	#
	# Set parameters and env variables for selected AUTOSTART
	#
	if param compare SYS_AUTOSTART 0
	then
		ekf2 start
	else
		sh /etc/init.d/rc.autostart
	fi
	unset MODE

	#
	# Override parameters from user configuration file
	#
	set FCONFIG /fs/microsd/etc/config.txt
	if [ -f $FCONFIG ]
	then
		echo "Custom: ${FCONFIG}"
		sh $FCONFIG
	fi
	unset FCONFIG

	#
	# If autoconfig parameter was set, reset it and save parameters
	#
	if [ $AUTOCNF == yes ]
	then
		# Disable safety switch by default on Pixracer
		if ver hwcmp PX4FMU_V4
		then
			param set CBRK_IO_SAFETY 22027
		fi
		param set SYS_AUTOCONFIG 0
	fi
	unset AUTOCNF

	set IO_PRESENT no

	if [ $USE_IO == yes ]
	then
		#
		# Check if PX4IO present and update firmware if needed
		#
		if [ -f /etc/extras/px4io-v2.bin ]
		then
			set IO_FILE /etc/extras/px4io-v2.bin
		else
			set IO_FILE /etc/extras/px4io-v1.bin
		fi

		if px4io checkcrc ${IO_FILE}
		then
			echo "[init] PX4IO CRC OK" >> $LOG_FILE

			set IO_PRESENT yes
		else
			tone_alarm MLL32CP8MB

			if px4io start
			then
				# try to safe px4 io so motor outputs dont go crazy
				if px4io safety_on
				then
					# success! no-op
				else
					# px4io did not respond to the safety command
					px4io stop
				fi
			fi

			if px4io forceupdate 14662 ${IO_FILE}
			then
				usleep 10000
				if px4io checkcrc ${IO_FILE}
				then
					echo "PX4IO CRC OK after updating" >> $LOG_FILE
					tone_alarm MLL8CDE

					set IO_PRESENT yes
				else
					echo "PX4IO update failed" >> $LOG_FILE
					tone_alarm ${TUNE_ERR}
				fi
			else
				echo "PX4IO update failed" >> $LOG_FILE
				tone_alarm ${TUNE_ERR}
			fi
		fi
		unset IO_FILE

		if [ $IO_PRESENT == no ]
		then
			echo "PX4IO not found" >> $LOG_FILE
			tone_alarm ${TUNE_ERR}
		fi
	fi

	set DATAMAN_OPT ""
	if ver hwcmp AEROFC_V1
	then
		set DATAMAN_OPT -i
	fi
	if ver hwcmp AEROCORE2
	then
		set DATAMAN_OPT "-f /fs/mtd_dataman"
	fi
	# waypoint storage
	# REBOOTWORK this needs to start in parallel
	if dataman start $DATAMAN_OPT
	then
	fi
	unset DATAMAN_OPT

	#
	# Sensors System (start before Commander so Preflight checks are properly run)
	#
	# Commander needs to be this early for in-air-restarts
	if [ $HIL == yes ]
	then
		sensors start -h
		commander start -hil
	else
		sh /etc/init.d/rc.sensors
		commander start
	fi

	# Fixed wing setup
	if [ $VEHICLE_TYPE == fw ]
	then
		sh /etc/init.d/rc.fw_apps
	fi

	# Multicopters setup
	if [ $VEHICLE_TYPE == mc ]
	then
		sh /etc/init.d/rc.mc_apps
	fi

	# VTOL setup
	if [ $VEHICLE_TYPE == vtol ]
	then
		sh /etc/init.d/rc.vtol_apps
	fi

	# UGV setup
	if [ $VEHICLE_TYPE == ugv ]
	then
		sh /etc/init.d/rc.ugv_apps
	fi

	# passthrough mode
	if [ $VEHICLE_TYPE == passthrough ]
	then
		sh /etc/init.d/rc.passthrough
	fi

	# Generic setup (autostart ID not found)
	if [ $VEHICLE_TYPE == none ]
	then
		echo "No autostart ID found"
	fi

	sh /etc/init.d/rc.mavlink
	sh /etc/init.d/rc.logging
	send_event start
	load_mon start
	navigator start

	# Start any custom addons
	set FEXTRAS /fs/microsd/etc/extras.txt
	if [ -f $FEXTRAS ]
	then
		echo "Addons script: ${FEXTRAS}"
		sh $FEXTRAS
	fi
	unset FEXTRAS

	if ver hwcmp CRAZYFLIE
	then
		# CF2 shouldn't have an sd card
	else
		if ver hwcmp AEROCORE2
		then
			# AEROCORE2 shouldn't have an sd card
		else
			# Run no SD alarm
			if [ $LOG_FILE == /dev/null ]
			then
				# Play SOS
				tone_alarm error
			fi
		fi
	fi

	#
	# Check if we should start a thermal calibration
	# TODO move further up and don't start unnecessary services if we are calibrating
	#
	set TEMP_CALIB_ARGS ""
	if param compare SYS_CAL_GYRO 1
	then
		set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -g"
		param set SYS_CAL_GYRO 0
	fi
	if param compare SYS_CAL_ACCEL 1
	then
		set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -a"
		param set SYS_CAL_ACCEL 0
	fi
	if param compare SYS_CAL_BARO 1
	then
		set TEMP_CALIB_ARGS "${TEMP_CALIB_ARGS} -b"
		param set SYS_CAL_BARO 0
	fi
	if [ "x$TEMP_CALIB_ARGS" != "x" ]
	then
		send_event temperature_calibration ${TEMP_CALIB_ARGS}
	fi
	unset TEMP_CALIB_ARGS

	# vmount to control mounts such as gimbals, disabled by default.
	if param compare MNT_MODE_IN -1
	then
	else
		if vmount start
		then
		fi
	fi

# End of autostart
fi

# There is no further script processing, so we can free some RAM
# XXX potentially unset all script variables.
unset MAV_TYPE
unset MIXER
unset MIXER_AUX
unset OUTPUT_MODE
unset AUX_MODE
unset HIL
unset TUNE_ERR

# Boot is complete, inform MAVLink app(s) that the system is now fully up and running
mavlink boot_complete

if [ $EXIT_ON_END == yes ]
then
	echo "NSH exit"
	exit
fi
unset EXIT_ON_END
