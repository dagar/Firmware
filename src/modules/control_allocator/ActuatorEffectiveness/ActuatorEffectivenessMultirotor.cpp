/****************************************************************************
 *
 *   Copyright (c) 2020 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
 * @file ActuatorEffectivenessMultirotor.hpp
 *
 * Actuator effectiveness computed from rotors position and orientation
 *
 * @author Julien Lecoeur <julien.lecoeur@gmail.com>
 */

#include "ActuatorEffectivenessMultirotor.hpp"

bool ActuatorEffectivenessMultirotor::getEffectivenessMatrix(Matrix<float, NUM_AXES, NUM_ACTUATORS> &matrix)
{
	// Check if parameters have changed
	if (_updated || _parameter_update_sub.updated()) {
		// clear update
		parameter_update_s param_update;
		_parameter_update_sub.copy(&param_update);

		_updated = false;

		// Get multirotor geometry
		MultirotorGeometry geometry{};

		for (int n = 0; n < 16; n++) {
			char position_str[3][16];
			char axis_str[3][16];

			for (int axis = 0; axis < 3; axis++) {
				char axis_char = 'X' + axis;
				sprintf(position_str[axis], "CA_MC_R%u_P%c", n, axis_char); // CA_MC_Rn_P{X,Y,Z}
				sprintf(axis_str[axis],     "CA_MC_R%u_A%c", n, axis_char); // CA_MC_Rn_A{X,Y,Z}
			}

			param_get(param_find(position_str[0]), &geometry.rotors[n].position(0));
			param_get(param_find(position_str[1]), &geometry.rotors[n].position(1));
			param_get(param_find(position_str[2]), &geometry.rotors[n].position(2));

			param_get(param_find(axis_str[0]), &geometry.rotors[n].axis(0));
			param_get(param_find(axis_str[1]), &geometry.rotors[n].axis(1));
			param_get(param_find(axis_str[2]), &geometry.rotors[n].axis(2));
			geometry.rotors[n].axis.normalize();

			char ct_str[16];
			sprintf(ct_str, "CA_MC_R%u_CT", n); // CA_MC_Rn_CT
			param_get(param_find(ct_str), &geometry.rotors[n].thrust_coef);

			char km_str[16];
			sprintf(km_str, "CA_MC_R%u_KM", n); // CA_MC_Rn_KM
			param_get(param_find(km_str), &geometry.rotors[n].moment_ratio);
		}

		_num_actuators = computeEffectivenessMatrix(geometry, matrix);
		return true;
	}

	return false;
}

int ActuatorEffectivenessMultirotor::computeEffectivenessMatrix(const MultirotorGeometry &geometry,
		Matrix<float, NUM_AXES, NUM_ACTUATORS> &effectiveness)
{
	int num_actuators = 0;

	effectiveness.setZero();

	for (size_t i = 0; i < NUM_ROTORS_MAX; i++) {
		// Get coefficients
		const float ct = geometry.rotors[i].thrust_coef;
		const float km = geometry.rotors[i].moment_ratio;

		if (fabsf(ct) < FLT_EPSILON) {
			continue;
		}

		// Compute thrust generated by this rotor
		Vector3f thrust{ct *geometry.rotors[i].axis};

		// Compute moment generated by this rotor
		Vector3f moment{ct *geometry.rotors[i].position.cross(geometry.rotors[i].axis) - ct *km *geometry.rotors[i].axis};

		// Fill corresponding items in effectiveness matrix
		for (size_t j = 0; j < 3; j++) {
			effectiveness(j, i) = moment(j);
			effectiveness(j + 3, i) = thrust(j);
		}

		num_actuators = i + 1;
	}

	return num_actuators;
}
