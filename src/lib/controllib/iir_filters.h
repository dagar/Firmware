// generated by gen_iir_filters.py, DO NOT EDIT

#include <controllib/BiQuad.hpp>
#include <matrix/math.hpp>

enum filter_t {
	FILT_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS = 3083,
	FILT_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS = 251,
	FILT_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS = 1238,
	FILT_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS = 11151,
	FILT_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS = 8693,
	FILT_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS = 11462,
	FILT_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS = 122,
	FILT_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS = 5201,
	FILT_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS = 9529
};

namespace control
{

template<size_t N>
class Filter
{
public:
	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x);
	virtual ~Filter() {};
};


template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS() :
		_s_0(0.0272484202621, 0.0272484202621, 0.0, -0.86214409776, 0.0),
		_s_1(1.0, -1.93882529638, 1.0, -1.89245751187, 0.916640938284)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
};

template<size_t N>
class Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS : public Filter<N>
{
public:
	Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS() :
		_s_0(0.0852917599288, -0.142051790422, 0.0852917599288, -1.59920792059, 0.652264439402),
		_s_1(1.0, -1.93833323596, 1.0, -1.87681051944, 0.909972503416)
	{
	}

	virtual ~Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
};

template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS() :
		_s_0(0.00986374602693, -0.0165240013225, 0.00986374602693, -1.83339430941, 0.844267341471),
		_s_1(1.0, -1.93353424962, 1.0, -1.92838356268, 0.948192935031)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
};

template<size_t N>
class Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS : public Filter<N>
{
public:
	Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS() :
		_s_0(0.00880692502722, -0.011926020475, 0.00880692502722, -1.62329211058, 0.66284048432),
		_s_1(1.0, -1.89940897542, 1.0, -1.7774505299, 0.808185538021),
		_s_2(1.0, -1.9454568531, 1.0, -1.91567990202, 0.941353340398)
	{
	}

	virtual ~Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		x = _s_2.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
	control::BiQuad<float, N> _s_2;
};

template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS() :
		_s_0(0.0910489857636, -0.143975669738, 0.0910489857636, -1.63864621212, 0.695484581484),
		_s_1(1.0, -1.89147844083, 1.0, -1.86556134659, 0.939191131177)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
};

template<size_t N>
class Filter_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS : public Filter<N>
{
public:
	Filter_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS() :
		_s_0(0.0769646381709, -0.0609237684602, 0.0769646381709, -1.14743940426, 0.363353044161),
		_s_1(1.0, -1.78073665241, 1.0, -1.60367861106, 0.729154802325),
		_s_2(1.0, -1.87942980616, 1.0, -1.83754028395, 0.928295848307)
	{
	}

	virtual ~Filter_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		x = _s_2.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
	control::BiQuad<float, N> _s_2;
};

template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS() :
		_s_0(0.00667066265758, 0.00667066265758, 0.0, -0.843806438156, 0.0),
		_s_1(1.0, -1.71974429431, 1.0, -1.7679423873, 0.813626715049),
		_s_2(1.0, -1.86680176399, 1.0, -1.87862839302, 0.948422948137)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		x = _s_2.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
	control::BiQuad<float, N> _s_2;
};

template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS() :
		_s_0(0.0938256857872, -0.108660155766, 0.0938256857872, -1.46212660002, 0.580392380742),
		_s_1(1.0, -1.76085836008, 1.0, -1.75005472224, 0.911629995244)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
};

template<size_t N>
class Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS : public Filter<N>
{
public:
	Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS() :
		_s_0(0.011573304442, -0.00817478079237, 0.011573304442, -1.60305193164, 0.660127694862),
		_s_1(1.0, -1.69608778115, 1.0, -1.72531617576, 0.839091684774),
		_s_2(1.0, -1.79207272337, 1.0, -1.81288174675, 0.960260182859)
	{
	}

	virtual ~Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS() {};

	virtual matrix::Vector<float, N> update(matrix::Vector<float, N> x)
	{
		x = _s_0.update(x);
		x = _s_1.update(x);
		x = _s_2.update(x);
		return x;
	};
private:
	control::BiQuad<float, N> _s_0;
	control::BiQuad<float, N> _s_1;
	control::BiQuad<float, N> _s_2;
};



template<size_t N>
Filter<N> *new_filter(filter_t type)
{
	if (type == FILT_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_20GS<N>();

	} else if (type == FILT_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS) {
		return new Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_20GS<N>();

	} else if (type == FILT_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_20WP_40WS_40GS<N>();

	} else if (type == FILT_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS) {
		return new Filter_LOWPASS_CHEBY2_1000FS_20WP_40WS_40GS<N>();

	} else if (type == FILT_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_20GS<N>();

	} else if (type == FILT_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS) {
		return new Filter_LOWPASS_CHEBY2_1000FS_40WP_60WS_20GS<N>();

	} else if (type == FILT_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_40WP_60WS_40GS<N>();

	} else if (type == FILT_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_20GS<N>();

	} else if (type == FILT_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS) {
		return new Filter_LOWPASS_ELLIP_1000FS_60WP_80WS_40GS<N>();

	} else {
		return nullptr;

	}

}

} // namespace control